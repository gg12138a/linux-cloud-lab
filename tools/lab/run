#!/bin/bash
#
# Copyright (C) 2016-2021 Wu Zhangjin <falcon@ruma.tech>
#

# Please don't run it manually
if [ ! -d /labs -o ! -d /.git ]; then
    echo "ERR: Please don't run this manually, do you mean tools/docker/run ?"
    exit 1
fi

# Dump environment variables
# env

# Clean up everything before running
find /var/lib/apt/lists -type f -delete &
find /var/cache -type f -delete &
find /var/log -type f -delete &

# NOTE: for Security, variables should be passed as environment variables
# NOTE: for Security, variables should be passed as environment variables
. /tools/docker/container >/dev/null

do_unlock

# Don't touch me
[ -z "$LAB_SECURITY" ] && LAB_SECURITY=0

get_vars UNIX_USER UNIX_UID HOST_NAME MIRROR_SITE PWD_LENGTH PWD_TOTAL

# Check and update mirror site
old=$(grep -m1 ^deb /etc/apt/sources.list  | cut -d ' ' -f2 | tr -s '/' | cut -d '/' -f2)
[ "$old" != "$MIRROR_SITE" -a -n "$MIRROR_SITE" ] && sed -i -e "s/$old/$MIRROR_SITE/g" /etc/apt/sources.list &

[ "x$UNIX_UID" = "x0" ] && UNIX_UID=1000

[ -z "$VNC_IP" ] && get_var VNC_IP $DEF_VNC_IP
[ -z "$VNC_TOKEN" ] && get_var VNC_TOKEN ""
[ -z "$ROUTE_IP" ] && ROUTE_IP=$(route -n | grep "^0.0.0.0" | tr -s ' ' | cut -d' ' -f2)

IFACE=$(ifconfig | head -1 | cut -d' ' -f1 | tr -d ':')
if [ "$VNC_IP" != "$DEF_VNC_IP" ]; then
  ifconfig $IFACE $VNC_IP up
  _ROUTE_IP=$(route -n | grep "^0.0.0.0" | tr -s ' ' | cut -d' ' -f2)
  [ -z "$_ROUTE_IP" ] && route add default gw $ROUTE_IP $IFACE
else
  VNC_IP=`ifconfig $IFACE | grep "inet " | tr -d -c '^[0-9. ]' | awk '{print $1}'`
fi

[ -n "$VNC_IP" -a -z "$VNC_TOKEN" ] && VNC_TOKEN=`echo -n $VNC_IP | tr -d '\n' | $ENCRYPT_CMD | cut -d' ' -f1 | cut -c1-$TOKEN_LENGTH`
[ -n "$VNC_IP" -a "$VNC_IP" != "$DEF_VNC_IP" ] && set_var VNC_IP
[ -n "$VNC_TOKEN" ] && set_var VNC_TOKEN

do_lock

# create a ubuntu user

HOME=/home/$UNIX_USER
CREATE_FLAG=/create_flag
BACKUP_FLAG=/backup_flag

if [ -d $HOME/ -a ! -f $CREATE_FLAG ]; then
  echo "LOG: Backup old home"
  mkdir -p /tmp/backup/
  mv $HOME /tmp/backup/
  touch $BACKUP_FLAG
fi

if [ -f $CREATE_FLAG ]; then
  # Simply report current setting
  echo "User: $UNIX_USER ,Password: $UNIX_PWD ,VNC Password: $VNC_PWD ,Viewonly Password: $VNC_PWD_VIEWONLY"
else
  # Touch a flag
  touch $CREATE_FLAG

  DEF_HOME=/home/$DEF_UNIX_USER
  DEF_SYSTEM_SUDOERS_USER=/etc/sudoers.d/$DEF_UNIX_USER
  DESKTOP=$HOME/Desktop/

  [ $SUDO_IDENTIFY -ge 1 ] && UNIX_USER_GROUPS="--groups adm,sudo,audio"
  [ $SUDO_IDENTIFY -eq 0 ] && UNIX_USER_GROUPS=""

  # The old one should be removed before create a new one
  id -u $UNIX_USER &>/dev/null && userdel -f -r $UNIX_USER

  useradd --uid $UNIX_UID --create-home --shell /bin/bash --user-group $UNIX_USER_GROUPS $UNIX_USER

  # Restore the backuped home
  if [ -f $BACKUP_FLAG -a -d /tmp/backup/ ]; then
    echo "LOG: Restore old home"
    rsync -a /tmp/backup/$UNIX_USER/ $HOME/
    chown $UNIX_USER:$UNIX_USER -R $HOME/
    rm -rf /tmp/backup
  fi

  # Install more system configuration files
  [ ! -d $DESKTOP ] && mkdir $DESKTOP

  for system in $CORE_SYSTEM_DIR $CONFIG_SYSTEM_DIR
  do
    for f in `find $system -type f | sed -e "s%$system%%g"`
    do
      d=$(echo $f | sed -e "s%$DEF_HOME%$HOME%g")
      dest=`dirname $d`
      [ ! -d $dest ] && mkdir -p $dest
      cp $system/$f $d
    done
  done

  SYSTEM_SUDOERS_USER=/etc/sudoers.d/$UNIX_USER
  [ $SUDO_IDENTIFY -eq 2 ] && echo "$UNIX_USER ALL=(ALL) NOPASSWD: ALL" > $SYSTEM_SUDOERS_USER \
  			&& chmod 440 $SYSTEM_SUDOERS_USER

  [ -f "$DEF_SYSTEM_SUDOERS_USER" -a "$LAB_SECURITY" != "0" ] \
    && mv $DEF_SYSTEM_SUDOERS_USER $SYSTEM_SUDOERS_USER \
    && sed -i -e "s/^$DEF_UNIX_USER/$UNIX_USER/g" $SYSTEM_SUDOERS_USER \
    && chmod 440 $SYSTEM_SUDOERS_USER

  chown $UNIX_USER:$UNIX_USER -R $HOME/

  [ -d /usr/share/desktop/home/.config ] \
    && sudo -u $UNIX_USER -i bash -c "cp -r /usr/share/desktop/home/{.[^.]*,*} /home/$UNIX_USER/" >/dev/null 2>&1

  # Override user's configurations pre-installed in /usr/share/desktop/home/
  for system in $CORE_SYSTEM_DIR $CONFIG_SYSTEM_DIR
  do
    for f in `find $system/home -type f | sed -e "s%$system%%g"`
    do
      d=$(echo $f | sed -e "s%$DEF_HOME%$HOME%g")
      dest=`dirname $d`
      [ ! -d $dest ] && mkdir -p $dest
      sudo -u $UNIX_USER -i bash -c "cp $system/$f $d"
    done
  done

  # Create password, ENV > CONF > PWGEN

  do_unlock

  [ -z "$UNIX_PWD" ] && get_var UNIX_PWD
  [ -z "$VNC_PWD" ] && get_var VNC_PWD
  [ -z "$VNC_PWD_VIEWONLY" ] && get_var VNC_PWD_VIEWONLY

  [ -z "$PWD_TOTAL" ] && PWD_TOTAL=$DEF_PWD_TOTAL
  [ -z "$PWD_LENGTH" ] && PWD_TOTAL=$DEF_PWD_LENGTH

  PWGEN_OPTS="-B -s -n -v $PWD_LENGTH 1"
  [ -z "$UNIX_PWD" ] && UNIX_PWD=`pwgen $PWGEN_OPTS | tr '[A-Z]' '[a-z]'`
  [ -z "$VNC_PWD" ] && VNC_PWD=`pwgen $PWGEN_OPTS | tr '[A-Z]' '[a-z]'`
  [ -z "$VNC_PWD_VIEWONLY" ] && VNC_PWD_VIEWONLY=`pwgen $PWGEN_OPTS | tr '[A-Z]' '[a-z]'`

  [ -n "$UNIX_PWD" ] && set_var UNIX_PWD
  [ -n "$VNC_PWD" ] && set_var VNC_PWD
  [ -n "$VNC_PWD_VIEWONLY" ] && set_var VNC_PWD_VIEWONLY

  # Sync UID between host and container
  FILES_TO_SYN_PERM="$LAB_UNIX_PWD $LAB_VNC_PWD $LAB_VNC_PWD_VIEWONLY $LAB_UNIX_UID $LAB_UNIX_USER $LAB_VNC_IP $LAB_VNC_TOKEN"
  for f in $FILES_TO_SYN_PERM
  do
    [ ! -f $f ] && continue
    sudo chown $UNIX_USER:$UNIX_USER $f
    sudo chmod a+w $f
  done

  do_lock

  # Don't touch me: otherwise, need to modify tools/docker/run
  echo "User: $UNIX_USER ,Password: $UNIX_PWD ,VNC Password: $VNC_PWD ,Viewonly Password: $VNC_PWD_VIEWONLY"

  SYSTEM_SUPERVISORD_CONF=/etc/supervisor/conf.d/x11vnc.conf
  if [ "$UNIX_USER" != "$DEF_UNIX_USER" ]; then
    sed -i -e "s%$DEF_HOME%$HOME%g" $SYSTEM_SUPERVISORD_CONF
    sed -i -e "s%user=$DEF_UNIX_USER%user=$UNIX_USER%g" $SYSTEM_SUPERVISORD_CONF
  fi

  # VNC PASS
  which x11vnc >/dev/null 2>&1
  if [ $? -eq 0 ]; then
    VNC_PWD_FILE=$HOME/.vnc/passwdfile
    [ ! -d $HOME/.vnc ] && mkdir -p $HOME/.vnc
    echo $VNC_PWD > $VNC_PWD_FILE
    echo __BEGIN_VIEWONLY__ >> $VNC_PWD_FILE
    echo $VNC_PWD_VIEWONLY >> $VNC_PWD_FILE

    if [ $PWD_TOTAL -gt 0 ]; then
      PWGEN_OPTS="-B -s -n -v $PWD_LENGTH $PWD_TOTAL"
      pwgen $PWGEN_OPTS | tr ' ' '\n' >> $VNC_PWD_FILE
    fi
    chmod o-rwx $VNC_PWD_FILE

    # Disable the VNC login password
    [ $VNC_IDENTIFY -eq 0 -a "x$HOST_NAME" = "xlocalhost" ] \
       && sed -i -e "s% -usepw$%-nopw%g" $SYSTEM_SUPERVISORD_CONF
  fi

  # UNIX PASS
  echo "$UNIX_USER:$UNIX_PWD" | chpasswd

  # Forbit unix user login(no identify) by locking it, and unlock it for login available(identify)
  [ $UNIX_IDENTIFY -eq 0 ] && passwd -l $UNIX_USER
  [ $UNIX_IDENTIFY -eq 1 ] && passwd -u $UNIX_USER
fi

# update owner for the mapped volumes
volumes="$GIT_WORKDIR $LAB_WORKDIR $TOOL_WORKDIR $CONFIG_WORKDIR"
UNIX_GID=`id -g $UNIX_USER`
for v in $volumes
do
  user=$(stat -c '%U' $v)
  if [ "$user" != "$UNIX_USER" ]; then
    uid=$(stat -c '%u' $v)
    if [ "$uid" != "$UNIX_UID" ]; then
      (eval nohup chown $UNIX_UID:$UNIX_GID -R $v >/dev/null 2>&1 &)>/dev/null 2>&1
    fi
  fi
done

# create potential missing loop devices for some systems
if [ ! -b /dev/loop7 ]; then
  max_loop=$(cat /proc/cmdline | tr " " "\n" | grep max_loop | cut -d '=' -f2)
  [ -z "$max_loop" ] && max_loop=7
  for i in `seq 0 $max_loop`
  do
    mknod /dev/loop$i b 7 $i &
  done
fi

# mount tmpfs
mount -t tmpfs none /tmp/

# Run Lab specific tasks
[ -x $LAB_CONTAINER_RUN ] && UNIX_USER=$UNIX_USER $LAB_CONTAINER_RUN &

# Init lxqt detection
lxqt=0
# Detect lxqt
which startlxqt >/dev/null 2>&1 && ln -sf /usr/bin/lxqt-session /usr/bin/lxsession && lxqt=1
# Detect cinnamon
which cinnamon-session >/dev/null 2>&1 && ln -sf /usr/bin/cinnamon-session /usr/bin/lxsession
# Clean up lxqt specific files
[ $lxqt -eq 0 ] && rm -rf $HOME/.config/lxqt $HOME/.config/pcmanfm-qt $HOME/.config/autostart/lxqt*.desktop &

# Run image built-in tasks
for f in /etc/startup.aux/*.sh
do
  [ ! -x $f ] && chmod a+x $f
  $f
done

# Report boot_completed
echo "boot_completed"

# Reset environment passed from host
if [ -n "$VARS" ]; then
  VARS="$(echo $VARS | sed -e 's/\(HOST_OS\|UNIX_USER\|UNIX_UID\)//g')"
  unset $VARS
fi

# Launch supervisor tasks
SYSTEM_SUPERVISORD_CONF=/etc/supervisor/supervisord.conf
/usr/bin/supervisord -n -c $SYSTEM_SUPERVISORD_CONF
